"""
The configuration file would look like this (sans those // comments):

{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""

import os
import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import csv
import logging
import datetime

import requests
import msal

import pandas as pd


# Logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("debug.log"),
        logging.StreamHandler()
    ]
)

client_id = os.getenv("daemon_client_id")
if not client_id:
    errmsg = "Define daemon_client_id environment variable"
    logging.error(errmsg)
    raise ValueError(errmsg)    
else:
    logging.info("client_id found -> '{0}'.".format(client_id))

client_secret = os.getenv("daemon_client_secret")
if not client_secret:
    errmsg = "Define daemon_client_secret environment variable"
    logging.error(errmsg)
    raise ValueError(errmsg)
else:
    logging.info("client_secret found.")

config = json.load(open(sys.argv[1])) 

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    client_id, authority=config["authority"],
    client_credential=client_secret,
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)

if not result:
    logging.info("No token exists in cache. Getting a new one from AzureAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])

if "access_token" in result:

    yesterday = datetime.datetime.today() - datetime.timedelta(days=1)
    
    #request_filter = "filter=createdDateTime ge 2020-08-19T03:00:00Z and createdDateTime le 2020-08-20T03:00:00Z"
    request_filter = "filter=createdDateTime ge 2020-08-{0}T03:00:00Z and createdDateTime le 2020-08-{1}T03:00:00Z".format(
        yesterday.strftime("%d"),
        datetime.datetime.today().strftime("%d"))    
    request_order = "orderby=createdDateTime"
    endpoint_signIns = "{0}?&${1}&${2}".format(config["endpoint_signIns"], request_filter, request_order)

    logging.debug("Endpoint set as: '{0}'".format(endpoint_signIns))

    csv_file_path = "auditSignIns_{0}_generated_{1}.csv".format(yesterday.strftime("%Y-%m-%d"), datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S"))

    with (open(csv_file_path, "w", newline='', encoding='utf-8')) as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow([
            "Nome",
            "E-mailUniasselvi",
            "DataDeEntrada",
            "AplicativoMicrosoft",
            "AplicativoClienteUtilizado",
            "Navegador",
            "SistemaOperacional",
            "IPAddress",
            "Cidade",
            "Estado",
            "Pa√≠s",
            "StatusDaEntrada"
        ])

    def get_graph_data(endpoint):
        graph_data = requests.get(  # Use token to call downstream service
        endpoint,
        headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()

        return graph_data
    
    def save_to_csv(graph_data):
        if "error" in graph_data:
            logging.error("{0}: {1}".format(graph_data["error"]["code"], graph_data["error"]["message"]))
        else:
            print("Graph API call result page")
            #print(json.dumps(graph_data, indent=2))
            with open('graph_data.json', 'w', encoding='utf-8') as f_json:
                json.dump(graph_data, f_json, ensure_ascii=False, indent=4)

            try:
                with (open(csv_file_path, "a", newline='', encoding='utf-8')) as csv_file:
                    csv_writer = csv.writer(csv_file)
                    for graph_data in graph_data["value"]:
                        csv_writer.writerow((
                            graph_data["userDisplayName"],
                            graph_data["userPrincipalName"],
                            graph_data["createdDateTime"],
                            graph_data["appDisplayName"],
                            graph_data["clientAppUsed"],
                            graph_data["deviceDetail"]["browser"],
                            graph_data["deviceDetail"]["operatingSystem"],
                            graph_data["ipAddress"],
                            graph_data["location"]["city"],
                            graph_data["location"]["state"],
                            graph_data["location"]["countryOrRegion"],
                            graph_data["status"]["errorCode"]))
                logging.info("Graph response page saved at CSV file '{0}'.".format(csv_file_path))
            except:
                logging.error("Exception while generating CSV file.")
        return

    # Calling graph using the access token
    '''
    graph_data = requests.get(  # Use token to call downstream service
        config["endpoint_test3"],
        headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
    if "error" in graph_data:
        logging.error("{0}: {1}".format(graph_data["error"]["code"], graph_data["error"]["message"]))
    else:
        print("Graph API call result: ")
        print(json.dumps(graph_data, indent=2))
        with open('graph_data.json', 'w', encoding='utf-8') as f_json:
            json.dump(graph_data, f_json, ensure_ascii=False, indent=4)
        #df = pd.read_json(r"graph_data.json")
        #df.to_csv("test.csv", encoding='utf-8', index=False)
    '''

    logging.info("Sending request do enpoint.")

    graph_data = get_graph_data(endpoint_signIns)
    save_to_csv(graph_data)

    while "@odata.nextLink" in graph_data:
        graph_data = get_graph_data(graph_data["@odata.nextLink"])
        save_to_csv(graph_data)

        '''f_csv = csv.writer(open("graph_data.csv", "w", encoding='utf-8'))
        f_csv.writerow(
            [
                "Nome",
                "E-mailUniasselvi",
                "DataDeEntrada",
                "AplicativoDeEntrada",
                "AplicativoCliente",
                "Navegador",
                "SistemaOperacional",
                "IPAddress",
                "StatusDaEntrada"
                ])

        for graph_data in graph_data["value"]:
            f_csv.writerow(
                (graph_data["userDisplayName"],
                graph_data["userPrincipalName"],
                graph_data["createdDateTime"],
                graph_data["appDisplayName"],
                graph_data["deviceDetail"]["browser"],
                graph_data["deviceDetail"]["operatingSystem"],
                graph_data["ipAddress"],
                graph_data["status"]["errorCode"])
            )'''

        
else:
    logging.error("{0}: {1} (correlation_id: {3})".format(result.get("error"), result.get("error_description"), result.get("correlation_id")))
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug

