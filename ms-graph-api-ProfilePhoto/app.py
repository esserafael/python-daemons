"""
The configuration file would look like this (sans those // comments):

{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""

import os
import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import subprocess
import json
import csv
import logging
import datetime
import uuid
import pathlib
import glob

import requests
import msal

# Current script path
current_wdpath = os.path.dirname(__file__)

cache_file_folder = "cache-files"

if(os.path.exists(cache_file_folder)):
    # Clears the cache folder
    files = glob.glob(f"{cache_file_folder}/*")
    for f in files:
        os.remove(f)
else:
    # Creates the cache folder if does not exist.
    pathlib.Path(cache_file_folder).mkdir(exist_ok=True)


# Logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(os.path.join(current_wdpath, "debug.log")),
        logging.StreamHandler()
    ]
)

client_id = os.getenv("daemon_client_id2")
if not client_id:
    errmsg = "Define daemon_client_id2 environment variable"
    logging.error(errmsg)
    raise ValueError(errmsg)    
else:
    logging.info("client_id found -> '{0}'.".format(client_id))

client_secret = os.getenv("daemon_client_secret2")
if not client_secret:
    errmsg = "Define daemon_client_secret2 environment variable"
    logging.error(errmsg)
    raise ValueError(errmsg)
else:
    logging.info("client_secret found.")

config = json.load(open(sys.argv[1]))

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    client_id, authority=config["authority"],
    client_credential=client_secret,
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)

if not result:
    logging.info("No token exists in cache. Getting a new one from AzureAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])

if "access_token" in result:

    endpoint_ProfilePic = f"{config['endpoint_ProfilePic']}/a.sky@uniasselvi.com.br/photos/96x96/$value"

    logging.debug(f"Endpoint set as: '{endpoint_ProfilePic}'")

    def get_graph_data(endpoint):
        graph_data = requests.get(  # Use token to call downstream service
        endpoint,
        headers={'Authorization': 'Bearer ' + result['access_token']}, )

        if "error" in graph_data:            
            logging.error("{0}: {1}".format(graph_data["error"]["code"], graph_data["error"]["message"]))
        else:        
            return graph_data    

    graph_data = get_graph_data(endpoint_ProfilePic)

    if graph_data.status_code == 200:

        cache_file_name = f"{os.path.join(cache_file_folder, str(uuid.uuid4()))}"

        with (open(cache_file_name, "wb")) as cache_file:
            cache_file.write(graph_data.content)

        ps_arg = f"Set-ADUser -Identity 38559063277 -Replace @{{thumbnailPhoto=([byte[]](Get-Content \"{cache_file_name}\" -Encoding Byte))}} -Server asl-ad04"

        try:
            subprocess.Popen([
                "powershell.exe",
                f"{ps_arg}"
                ])
            
            logging.info(f"Calling PowerShell to finish the job: {ps_arg}")

        except Exception as e:
            logging.error(f"Exception while calling PowerShell: {str(e)}")


else:
    logging.error("{0}: {1} (correlation_id: {3})".format(result.get("error"), result.get("error_description"), result.get("correlation_id")))
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug

